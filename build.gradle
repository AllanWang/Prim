buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

subprojects {

    apply plugin: 'kotlin'
    if (it.name != 'server') {
        apply plugin: 'maven'
    }

    group = 'ca.allanwang'

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/ktor" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib"

        testCompile "org.junit.jupiter:junit-jupiter-api:${junit_version}"
        testCompile "org.junit.jupiter:junit-jupiter-params:${junit_version}"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

        testCompile "org.jetbrains.kotlin:kotlin-test"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit5"
        testCompile "org.jetbrains.kotlin:kotlin-reflect"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }


    def kotlinResolutions = ['kotlin-reflect',
                             'kotlin-stdlib',
                             'kotlin-stdlib-jdk7',
                             'kotlin-stdlib-jdk8',
                             'kotlin-test',
                             'kotlin-test-junit4',
                             'kotlin-test-junit5']

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin' && requested.name in kotlinResolutions) {
                details.useVersion kotlin_version
            }
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = jvm_target
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = jvm_target
    }
    sourceCompatibility = jvm_target

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: classes) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}